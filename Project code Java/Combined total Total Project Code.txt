import java.sql.*;
import java.util.Scanner;

public class HotelReservationSystem {
    private static final String url = "jdbc:mysql://localhost:3306/hotel_db";
    private static final String username = "root";
    private static final String password = ""; // XAMPP default password

    public static void main(String[] args) throws SQLException {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            System.out.println("MySQL JDBC Driver not found.");
            return;
        }

        try (Connection connection = DriverManager.getConnection(url, username, password);
             Scanner scanner = new Scanner(System.in)) {

            boolean isLoggedIn = false;

            while (!isLoggedIn) {
                System.out.println("\n=== HOTEL SYSTEM ===");
                System.out.println("1. Register");
                System.out.println("2. Login");
                System.out.println("0. Exit");
                System.out.print("Choose an option: ");
                int option = scanner.nextInt();
                scanner.nextLine(); // consume newline

                switch (option) {
                    case 1:
                        registerUser(connection, scanner);
                        break;
                    case 2:
                        isLoggedIn = loginUser(connection, scanner);
                        break;
                    case 0:
                        System.out.println("Goodbye!");
                        return;
                    default:
                        System.out.println("Invalid choice.");
                }
            }

            while (true) {
                System.out.println("\n=== HOTEL MANAGEMENT SYSTEM ===");
                System.out.println("1. Reserve a Room");
                System.out.println("2. View Reservations");
                System.out.println("3. Get Room Number");
                System.out.println("4. Update Reservation");
                System.out.println("5. Delete Reservation");
                System.out.println("0. Logout");
                System.out.print("Choose an option: ");
                int choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 1: reserveRoom(connection, scanner); break;
                    case 2: viewReservations(connection); break;
                    case 3: getRoomNumber(connection, scanner); break;
                    case 4: updateReservation(connection, scanner); break;
                    case 5: deleteReservation(connection, scanner); break;
                    case 0: System.out.println("Logged out."); return;
                    default: System.out.println("Invalid choice.");
                }
            }

        } catch (SQLException e) {
            System.out.println("Connection error: " + e.getMessage());
        }
    }

    private static void registerUser(Connection connection, Scanner scanner) {
        try {
            System.out.print("Enter new username: ");
            String user = scanner.nextLine();
            System.out.print("Enter new password: ");
            String pass = scanner.nextLine();

            String sql = "INSERT INTO users (username, password) VALUES (?, ?)";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, user);
                stmt.setString(2, pass);
                stmt.executeUpdate();
                System.out.println("Registration successful!");
            }
        } catch (SQLException e) {
            if (e.getMessage().contains("Duplicate entry")) {
                System.out.println("Username already exists.");
            } else {
                e.printStackTrace();
            }
        }
    }

    private static boolean loginUser(Connection connection, Scanner scanner) {
        try {
            System.out.print("Enter username: ");
            String user = scanner.nextLine();
            System.out.print("Enter password: ");
            String pass = scanner.nextLine();

            String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, user);
                stmt.setString(2, pass);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        System.out.println("Login successful. Welcome, " + user + "!");
                        return true;
                    } else {
                        System.out.println("Invalid credentials.");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private static void reserveRoom(Connection connection, Scanner scanner) {
        try {
            System.out.print("Enter guest name: ");
            String guest = scanner.nextLine();
            System.out.print("Enter room number: ");
            int room = scanner.nextInt();
            scanner.nextLine(); // clear buffer
            System.out.print("Enter contact number: ");
            String contact = scanner.nextLine();

            String sql = "INSERT INTO reservations (guest_name, room_number, contact_number) VALUES (?, ?, ?)";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, guest);
                stmt.setInt(2, room);
                stmt.setString(3, contact);
                int rows = stmt.executeUpdate();
                System.out.println(rows > 0 ? "Reservation successful!" : "Reservation failed.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void viewReservations(Connection connection) throws SQLException {
        String sql = "SELECT * FROM reservations";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            System.out.printf("%-5s %-15s %-10s %-15s %-20s%n", "ID", "Guest", "Room", "Contact", "Date");
            System.out.println("--------------------------------------------------------------");
            while (rs.next()) {
                System.out.printf("%-5d %-15s %-10d %-15s %-20s%n",
                        rs.getInt("reservation_id"),
                        rs.getString("guest_name"),
                        rs.getInt("room_number"),
                        rs.getString("contact_number"),
                        rs.getTimestamp("reservation_date"));
            }
        }
    }

    private static void getRoomNumber(Connection connection, Scanner scanner) {
        try {
            System.out.print("Enter reservation ID: ");
            int id = scanner.nextInt();
            scanner.nextLine();
            System.out.print("Enter guest name: ");
            String name = scanner.nextLine();

            String sql = "SELECT room_number FROM reservations WHERE reservation_id = ? AND guest_name = ?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setInt(1, id);
                stmt.setString(2, name);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        System.out.println("Room number: " + rs.getInt("room_number"));
                    } else {
                        System.out.println("No matching reservation.");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void updateReservation(Connection connection, Scanner scanner) {
        try {
            System.out.print("Enter reservation ID to update: ");
            int id = scanner.nextInt();
            scanner.nextLine();

            if (!reservationExists(connection, id)) {
                System.out.println("Reservation not found.");
                return;
            }

            System.out.print("Enter new guest name: ");
            String guest = scanner.nextLine();
            System.out.print("Enter new room number: ");
            int room = scanner.nextInt();
            scanner.nextLine();
            System.out.print("Enter new contact number: ");
            String contact = scanner.nextLine();

            String sql = "UPDATE reservations SET guest_name=?, room_number=?, contact_number=? WHERE reservation_id=?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setString(1, guest);
                stmt.setInt(2, room);
                stmt.setString(3, contact);
                stmt.setInt(4, id);
                int rows = stmt.executeUpdate();
                System.out.println(rows > 0 ? "Reservation updated." : "Update failed.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void deleteReservation(Connection connection, Scanner scanner) {
        try {
            System.out.print("Enter reservation ID to delete: ");
            int id = scanner.nextInt();

            if (!reservationExists(connection, id)) {
                System.out.println("Reservation not found.");
                return;
            }

            String sql = "DELETE FROM reservations WHERE reservation_id=?";
            try (PreparedStatement stmt = connection.prepareStatement(sql)) {
                stmt.setInt(1, id);
                int rows = stmt.executeUpdate();
                System.out.println(rows > 0 ? "Reservation deleted." : "Delete failed.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static boolean reservationExists(Connection connection, int id) {
        String sql = "SELECT reservation_id FROM reservations WHERE reservation_id=?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}
